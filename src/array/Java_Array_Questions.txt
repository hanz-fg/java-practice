# Java Array Programming Problems

## Problem 1: Peak Element Finder
Given an array of integers, find a peak element. A peak element is one that is greater than both its neighbors. If there are multiple peaks, return any one of them.

**Function Signature:**
```java
public int findPeak(int[] nums)
```

**Input:**
- An array of integers `nums` (1 ≤ nums.length ≤ 10,000)
- Each element -10^4 ≤ nums[i] ≤ 10^4

**Output:**
- Return the index of any peak element

**Example:**
```
Input: nums = [1,3,20,4,1,0]
Output: 2
Explanation: 20 is greater than both 3 and 4
```

## Problem 2: Rotate Array
Write a function to rotate an array to the right by k steps.

**Function Signature:**
```java
public void rotateArray(int[] nums, int k)
```

**Input:**
- An array of integers `nums` (1 ≤ nums.length ≤ 10,000)
- An integer k representing the number of steps (0 ≤ k ≤ 10,000)

**Output:**
- Modify the array in-place

**Example:**
```
Input: nums = [1,2,3,4,5,6,7], k = 3
Output: [5,6,7,1,2,3,4]
```

## Problem 3: Range Sum Query
Given an array of integers, implement a class that can efficiently calculate the sum of elements between indices i and j (inclusive).

**Class Structure:**
```java
class RangeSumQuery {
    public RangeSumQuery(int[] nums) {
        // Initialize your data structure here
    }

    public int sumRange(int i, int j) {
        // Return the sum of elements from index i to j
    }
}
```

**Input:**
- Array of integers `nums` (0 ≤ nums.length ≤ 10,000)
- Queries with indices i, j (0 ≤ i ≤ j < nums.length)

**Example:**
```
Input: nums = [-2, 0, 3, -5, 2, -1]
sumRange(0, 2) → 1
sumRange(2, 5) → -1
sumRange(0, 5) → -3
```

## Problem 4: Maximum Subarray Product
Find the contiguous subarray with the largest product within the array.

**Function Signature:**
```java
public int maxProduct(int[] nums)
```

**Input:**
- An array of integers `nums` (1 ≤ nums.length ≤ 10,000)
- Each element -10 ≤ nums[i] ≤ 10

**Output:**
- Return the maximum product possible

**Example:**
```
Input: nums = [2,3,-2,4]
Output: 6
Explanation: [2,3] has the largest product 6
```

## Problem 5: Missing Number
Given an array containing n distinct numbers taken from 0 to n, find the missing number.

**Function Signature:**
```java
public int findMissingNumber(int[] nums)
```

**Input:**
- An array of integers `nums` (1 ≤ nums.length ≤ 10,000)
- Each element 0 ≤ nums[i] ≤ n

**Output:**
- Return the missing number

**Example:**
```
Input: nums = [3,0,1]
Output: 2
```

## Problem 6: Leaders in Array
Find all the leaders in an array. A leader is an element that is greater than all elements to its right.

**Function Signature:**
```java
public List<Integer> findLeaders(int[] nums)
```

**Input:**
- An array of integers `nums` (1 ≤ nums.length ≤ 10,000)
- Each element -10^4 ≤ nums[i] ≤ 10^4

**Output:**
- Return a list of all leaders in order of appearance

**Example:**
```
Input: nums = [16,17,4,3,5,2]
Output: [17,5,2]
Explanation: 17 is greater than all elements to its right, 5 is greater than 2, and 2 is the last element
```

## Problem 7: Equilibrium Index
Find an equilibrium index in an array. An equilibrium index is an index where the sum of elements to its left equals the sum of elements to its right.

**Function Signature:**
```java
public int findEquilibriumIndex(int[] nums)
```

**Input:**
- An array of integers `nums` (1 ≤ nums.length ≤ 10,000)
- Each element -1000 ≤ nums[i] ≤ 1000

**Output:**
- Return the equilibrium index, or -1 if none exists

**Example:**
```
Input: nums = [-7,1,5,2,-4,3,0]
Output: 3
Explanation: At index 3, sum of left side = -1, sum of right side = -1
```

## Problem 8: Minimum Platforms
Given arrival and departure times of trains, find the minimum number of platforms needed.

**Function Signature:**
```java
public int findMinPlatforms(int[] arrival, int[] departure)
```

**Input:**
- Two arrays representing arrival and departure times
- 1 ≤ arrival.length = departure.length ≤ 10,000
- Times are given in 24-hour format (0000 to 2359)

**Output:**
- Return the minimum number of platforms needed

**Example:**
```
Input:
arrival = [900, 940, 950, 1100, 1500, 1800]
departure = [910, 1200, 1120, 1130, 1900, 2000]
Output: 3
```

## Problem 9: Subarray with Given Sum
Find a contiguous subarray that adds to a given sum.

**Function Signature:**
```java
public int[] findSubarrayWithSum(int[] nums, int targetSum)
```

**Input:**
- An array of positive integers `nums` (1 ≤ nums.length ≤ 10,000)
- A target sum (1 ≤ targetSum ≤ 10^7)

**Output:**
- Return array of [start_index, end_index] or [-1,-1] if no solution exists

**Example:**
```
Input: nums = [1,4,20,3,10,5], targetSum = 33
Output: [2,4]
Explanation: Sum of elements from index 2 to 4 is 20+3+10 = 33
```

## Problem 10: Wave Array
Convert an array into a wave array. In a wave array, every even position element is greater than its adjacent elements.

**Function Signature:**
```java
public void convertToWave(int[] nums)
```

**Input:**
- An array of integers `nums` (1 ≤ nums.length ≤ 10,000)
- Each element 0 ≤ nums[i] ≤ 10^4

**Output:**
- Modify the array in-place to create wave pattern

**Example:**
```
Input: nums = [1,2,3,4]
Output: [2,1,4,3]
Explanation: Array is modified to [2,1,4,3] to form a wave
```
